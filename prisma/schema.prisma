generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  roleId      String
  role        Role          @relation(fields: [roleId], references: [id])
  
  tasksCreated   Task[]             @relation("TaskCreator")
  assignments    TaskAssignment[]
  sessions       Session[]
  comments       Comment[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Role {
  id       String  @id @default(uuid())
  name     String  @unique
  users    User[]
}


model Board {
  id        String    @id @default(uuid())
  name      String
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Task {
  id           String           @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus       @default(TODO)
  priority     TaskPriority     @default(MEDIUM)
  dueDate      DateTime?
  
  boardId      String?
  board        Board?           @relation(fields: [boardId], references: [id])

  creatorId    String
  creator      User             @relation("TaskCreator", fields: [creatorId], references: [id])

  assignments  TaskAssignment[]
  comments     Comment[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TaskAssignment {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  assignedAt DateTime @default(now())

  @@unique([taskId, userId]) 
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}


model Session {
  id             String   @id @default(uuid())
  
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken    String
  refreshToken   String

  ipAddress      String?
  userAgent      String?
  device         String?
  location       String?

  createdAt      DateTime @default(now())
  expiresAt      DateTime
  lastActivityAt DateTime @default(now())
  isActive       Boolean  @default(true)
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
